 const handleUpdateProduk = async () => {
    if (!selectedProduk) return;
    try {
      const values = await form.validateFields();

      // Membuat FormData untuk upload file gambar dan data lainnya
      const formData = new FormData();
      formData.append("nama_produk", values.nama_produk);
      formData.append("harga_produk", values.harga_produk);
      formData.append("stok", values.stok);

      // Pastikan gambar dipilih sebelum menambahkan ke formData
      if (values.gambar_produk && values.gambar_produk.file) {
        formData.append("gambar_produk", values.gambar_produk.file);
      }

      if (values.status_produk) {
        formData.append("status_produk", values.status_produk);
      }

      // Mengirim request PUT ke backend untuk update produk
      const response = await axios.put(
        `http://localhost:3222/produk/${selectedProduk.id_produk}`,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      // Mengupdate produk dalam state produkList
      setProdukList((prevList) =>
        prevList.map((item) =>
          item.id_produk === selectedProduk.id_produk ? response.data : item
        )
      );

      // Setelah berhasil update, menampilkan pesan sukses dan reset form
      message.success("Produk berhasil diperbarui");
      setIsEditModalVisible(false);
      setSelectedProduk(null);
      form.resetFields();
    } catch (error) {
      // Handling error untuk Axios
      if (axios.isAxiosError(error) && error.response) {
        console.error("Error updating product:", error.response.data);
        message.error(
          `Gagal memperbarui produk: ${error.response.data.message}`
        );
      } else {
        // Handling error umum
        console.error("Unknown error:", error);
        message.error("Gagal memperbarui produk: Data harus diisi!");
      }
    }
  };